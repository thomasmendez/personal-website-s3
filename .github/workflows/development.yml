name: development.yml CI

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - run: npm ci
      - run: npm test
      - run: npm run build
      - name: Create dist Artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-dev
          path: dist/
          retention-days: 1
  configure-s3-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform/development fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform/development init -backend-config="region=${{ secrets.AWS_REGION_DEV }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform/development validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION_DEV }}"
          terraform -chdir=terraform/development plan -var="aws_bucket_name=${{ secrets.AWS_BUCKET_NAME_DEV }}" -no-color

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION_DEV }}"
          terraform -chdir=terraform/development apply -var="aws_bucket_name=${{ secrets.AWS_BUCKET_NAME_DEV }}" -auto-approve
      - name: Terraform Import and Apply
        id: import-apply
        if: steps.apply.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION_DEV }}"
          terraform -chdir=terraform/development import aws_s3_bucket.bucketdev ${{ secrets.AWS_BUCKET_NAME_DEV }}
          terraform -chdir=terraform/development apply -var="aws_bucket_name=${{ secrets.AWS_BUCKET_NAME_DEV }}" -auto-approve
  sync-s3-dev:
    runs-on: ubuntu-latest
    needs: [build, configure-s3-dev]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Retrieve dist files
        uses: actions/download-artifact@v2
        with:
          name: dist-dev
          path: dist/
      - name: Configure AWS Credentials
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_DEV }}
      - name: Deploy static site to S3 bucket
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: aws s3 sync ./dist/ s3://${{ secrets.AWS_BUCKET_NAME_DEV }}
